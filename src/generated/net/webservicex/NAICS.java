package net.webservicex;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.0.2
 * 2018-01-17T20:35:33.971+08:00
 * Generated source version: 3.0.2
 * 
 */
@WebServiceClient(name = "NAICS", 
                  wsdlLocation = "file:/home/yinxuanh/eclipse-workspace/soapclient_NAICS/src/main/resources/NAICS.asmx",
                  targetNamespace = "http://www.webserviceX.NET") 
public class NAICS extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.webserviceX.NET", "NAICS");
    public final static QName NAICSSoap12 = new QName("http://www.webserviceX.NET", "NAICSSoap12");
    public final static QName NAICSSoap = new QName("http://www.webserviceX.NET", "NAICSSoap");
    public final static QName NAICSHttpPost = new QName("http://www.webserviceX.NET", "NAICSHttpPost");
    public final static QName NAICSHttpGet = new QName("http://www.webserviceX.NET", "NAICSHttpGet");
    static {
        URL url = null;
        try {
            url = new URL("file:/home/yinxuanh/eclipse-workspace/soapclient_NAICS/src/main/resources/NAICS.asmx");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(NAICS.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/home/yinxuanh/eclipse-workspace/soapclient_NAICS/src/main/resources/NAICS.asmx");
        }
        WSDL_LOCATION = url;
    }

    public NAICS(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public NAICS(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public NAICS() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public NAICS(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public NAICS(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public NAICS(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    

    /**
     *
     * @return
     *     returns NAICSSoap
     */
    @WebEndpoint(name = "NAICSSoap12")
    public NAICSSoap getNAICSSoap12() {
        return super.getPort(NAICSSoap12, NAICSSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns NAICSSoap
     */
    @WebEndpoint(name = "NAICSSoap12")
    public NAICSSoap getNAICSSoap12(WebServiceFeature... features) {
        return super.getPort(NAICSSoap12, NAICSSoap.class, features);
    }
    /**
     *
     * @return
     *     returns NAICSSoap
     */
    @WebEndpoint(name = "NAICSSoap")
    public NAICSSoap getNAICSSoap() {
        return super.getPort(NAICSSoap, NAICSSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns NAICSSoap
     */
    @WebEndpoint(name = "NAICSSoap")
    public NAICSSoap getNAICSSoap(WebServiceFeature... features) {
        return super.getPort(NAICSSoap, NAICSSoap.class, features);
    }
    /**
     *
     * @return
     *     returns NAICSHttpPost
     */
    @WebEndpoint(name = "NAICSHttpPost")
    public NAICSHttpPost getNAICSHttpPost() {
        return super.getPort(NAICSHttpPost, NAICSHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns NAICSHttpPost
     */
    @WebEndpoint(name = "NAICSHttpPost")
    public NAICSHttpPost getNAICSHttpPost(WebServiceFeature... features) {
        return super.getPort(NAICSHttpPost, NAICSHttpPost.class, features);
    }
    /**
     *
     * @return
     *     returns NAICSHttpGet
     */
    @WebEndpoint(name = "NAICSHttpGet")
    public NAICSHttpGet getNAICSHttpGet() {
        return super.getPort(NAICSHttpGet, NAICSHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns NAICSHttpGet
     */
    @WebEndpoint(name = "NAICSHttpGet")
    public NAICSHttpGet getNAICSHttpGet(WebServiceFeature... features) {
        return super.getPort(NAICSHttpGet, NAICSHttpGet.class, features);
    }

}
